name: Upload packages to CDN

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Publish packages"]
    types:
      - completed

permissions:
  id-token: write
  contents: read

env:
  CDN_BUCKET: gc-design-system-daine-scratch-cdn
  CDN_REGION: ca-central-1

jobs:
  upload-to-cdn:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "@cdssnc/gcds-components"
            package: "./packages/web"
            dist: "./packages/web"

          - name: "@cdssnc/gcds-components-react"
            package: "./packages/react"
            dist: "./packages/react"

          - name: "@cdssnc/gcds-components-angular"
            package: "./packages/angular"
            dist: "./packages/angular/dist"

          - name: "@cdssnc/gcds-components-vue"
            package: "./packages/vue"
            dist: "./packages/vue"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq to get lerna version from lerna.json
        run: sudo apt-get install -y jq

      - name: Install AWS CLI
        run: sudo apt-get install awscli -y

      - name: Make retry script executable
        run: chmod +x ./utils/scripts/retry.sh

      - name: Make upload script executable
        run: chmod +x ./utils/scripts/upload_to_cdn.sh

      - name: Configure AWS credentials using OIDC
        # Replace with..correct role on production
        uses: aws-actions/configure-aws-credentials@50ac8dd1e1b10d09dac7b8727528b91bed831ac0 # v3.0.2
        with:
          role-to-assume: arn:aws:iam::951846448183:role/daine-gcds-components-apply
          role-session-name: CDNPublish
          aws-region: ${{ env.CDN_REGION }}

      - name: Verify AWS Configuration
        run: aws sts get-caller-identity

      - name: Upload file to S3
#        run: ./utils/scripts/retry.sh 3 "echo 'hello world'"
        run: ./utils/scripts/upload_to_cdn.sh ${{ matrix.name }}
        env:
          PACKAGE_VERSION: $(jq -r '.version' ${{ matrix.package }}/lerna.json)
          CDN_BUCKET: ${{ env.CDN_BUCKET }}
          CDN_CLOUDFRONT_DIST_ID: ${{secrets.CDN_CLOUDFRONT_DIST_ID}}
          PACKAGE_PATH: ${{ matrix.dist }}

#      - name: Upload file to S3 ${{ matrix.name }}
#        run: |
#          PACKAGE_VERSION=$(jq -r '.version' ../../lerna.json)
#          echo "PACKAGE_VERSION=$PACKAGE_VERSION"
#          PUBLISHED_PACKAGE=${{ matrix.name }}@$PACKAGE_VERSION
#          echo "PUBLISHED_PACKAGE=$PUBLISHED_PACKAGE"
#
#          aws s3 sync ./${{ matrix.name }} s3://${{ env.CDN_BUCKET }}/"$PUBLISHED_PACKAGE" --delete
#          aws s3 sync ./${{ matrix.name }} s3://${{ env.CDN_BUCKET }}/${{ matrix.name }}@latest --delete
#          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key "$PUBLISHED_PACKAGE"/package.json
#          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key ${{ matrix.name }}@latest/package.json
#
#          aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_CLOUDFRONT_DIST_ID }} --paths "/*"
#        working-directory: ${{ matrix.package }}
#
#        env:
#          PACKAGE_VERSION: $(jq -r '.version' ${{ matrix.package }}/lerna.json)
#          CDN_BUCKET: ${{ env.CDN_BUCKET }}
#          CDN_CLOUDFRONT_DIST_ID: ${{secrets.CDN_CLOUDFRONT_DIST_ID}}
#          PACKAGE_PATH: ${{ matrix.dist }}
