name: Publish packages
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'lerna.json'

permissions:
  id-token: write
  contents: read

env:
  CDN_BUCKET: gc-design-system-production-cdn
  CDN_REGION: ca-central-1

jobs:
  publish-web:
    name: Publish @cdssnc/gcds-components
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "@cdssnc/gcds-components"
            package: "./packages/web"
            dist: "./packages/web"

    steps:
      - name: Git Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Setup Node
        uses: actions/setup-node@eff380dfbcf941bf8832e4acb788cebe13dfd758
        with:
          node-version: 18

      - name: Install ${{ matrix.name }}
        run: npm install

      - name: Build ${{ matrix.name }}
        run: npm run build

      - name: Publish ${{ matrix.name }}
        uses: JS-DevTools/npm-publish@52bacc14a33500e8dcf0afe1bff552d638216212
        id: publish
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ${{ matrix.dist }}
          dry-run: true

      - name: Save PUBLISHED_PACKAGE to env var
        id: save_published_package_name
        run: echo "PUBLISHED_PACKAGE=${{ steps.publish.outputs.id }}"
        env:
          PUBLISHED_PACKAGE: ${{ steps.publish.outputs.id }}

#      - name: Configure AWS credentials using OIDC
#        if: steps.publish.outputs.id != ''
#        uses: aws-actions/configure-aws-credentials@50ac8dd1e1b10d09dac7b8727528b91bed831ac0 # v3.0.2
#        with:
#          role-to-assume: arn:aws:iam::307395567143:role/gcds-components-apply
#          role-session-name: CDNPublish
#          aws-region: ${{ env.CDN_REGION }}
#
#      - name: Update CDN ${{ matrix.name }}
#        if: steps.publish.outputs.id != ''
#        run: |
#          PUBLISHED_PACKAGE="${{ steps.publish.outputs.id }}"
#
#          mkdir -p ./tmp \
#            && sleep 60 \
#            && npm install --prefix ./tmp "$PUBLISHED_PACKAGE" \
#            && cd ./tmp/node_modules
#
#          aws s3 sync ./${{ matrix.name }} s3://${{ env.CDN_BUCKET }}/"$PUBLISHED_PACKAGE" --delete
#          aws s3 sync ./${{ matrix.name }} s3://${{ env.CDN_BUCKET }}/${{ matrix.name }}@latest --delete
#          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key "$PUBLISHED_PACKAGE"/package.json
#          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key ${{ matrix.name }}@latest/package.json
#
#          aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_CLOUDFRONT_DIST_ID }} --paths "/*"
#        working-directory: ${{ matrix.package }}

      - name: Report deployment to Sentinel
        if: steps.publish.outputs.id != ''
        uses: cds-snc/sentinel-forward-data-action@main
        with:
          input_data: '{"product": "design-system", "sha": "${{ github.sha }}", "version": "${{steps.publish.outputs.id}}", "repository": "${{ github.repository }}", "environment": "production", "status": "${{ job.status }}"}'
          log_type: CDS_Product_Deployment_Data
          log_analytics_workspace_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          log_analytics_workspace_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}


      - name: Slack notify on failure
        if: failure()
        run: |
          json='{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: Publish ${{ matrix.name }} failed: <https://github.com/cds-snc/gcds-components/actions/workflows/compile-and-publish.yml|Publish packages>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.SLACK_WEBHOOK_OPS }}

  publish-react-angular-vue:
    name: Publish @cdssnc/gcds-components-react, @cdssnc/gcds-components-angular, @cdssnc/gcds-components-vue
    needs: publish-web
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "@cdssnc/gcds-components-react"
            package: "./packages/react"
            dist: "./packages/react"

          - name: "@cdssnc/gcds-components-angular"
            package: "./packages/angular"
            dist: "./packages/angular/dist"

          - name: "@cdssnc/gcds-components-vue"
            package: "./packages/vue"
            dist: "./packages/vue"

    steps:
      - name: Git Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Setup Node
        uses: actions/setup-node@eff380dfbcf941bf8832e4acb788cebe13dfd758
        with:
          node-version: 18

      - name: Install monorepo (web, react, angular, vue)
        run: npm install

      - name: Build gcds-components (web, react, angular, vue)
        run: npm run build

      - name: Publish ${{ matrix.name }}
        uses: JS-DevTools/npm-publish@52bacc14a33500e8dcf0afe1bff552d638216212
        id: publish
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ${{ matrix.dist }}

#      - name: Configure AWS credentials using OIDC
#        if: steps.publish.outputs.id != ''
#        uses: aws-actions/configure-aws-credentials@50ac8dd1e1b10d09dac7b8727528b91bed831ac0 # v3.0.2
#        with:
#          role-to-assume: arn:aws:iam::307395567143:role/gcds-components-apply
#          role-session-name: CDNPublish
#          aws-region: ${{ env.CDN_REGION }}
#
#      - name: Update CDN ${{ matrix.name }}
#        if: steps.publish.outputs.id != ''
#        run: |
#          PUBLISHED_PACKAGE="${{ steps.publish.outputs.id }}"
#          mkdir -p ./tmp \
#            && sleep 60 \
#            && npm install --prefix ./tmp "$PUBLISHED_PACKAGE" \
#            && cd ./tmp/node_modules
#
#          aws s3 sync ./${{ matrix.name }} s3://${{ env.CDN_BUCKET }}/"$PUBLISHED_PACKAGE" --delete
#          aws s3 sync ./${{ matrix.name }} s3://${{ env.CDN_BUCKET }}/${{ matrix.name }}@latest --delete
#          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key "$PUBLISHED_PACKAGE"/package.json
#          aws s3api head-object --bucket ${{ env.CDN_BUCKET }} --key ${{ matrix.name }}@latest/package.json
#
#          aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_CLOUDFRONT_DIST_ID }} --paths "/*"
#        working-directory: ${{ matrix.package }}

      - name: Report deployment to Sentinel
        if: steps.publish.outputs.id != ''
        uses: cds-snc/sentinel-forward-data-action@main
        with:
          input_data: '{"product": "design-system", "sha": "${{ github.sha }}", "version": "${{steps.publish.outputs.id}}", "repository": "${{ github.repository }}", "environment": "production", "status": "${{ job.status }}"}'
          log_type: CDS_Product_Deployment_Data
          log_analytics_workspace_id: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          log_analytics_workspace_key: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

      - name: Slack notify on failure
        if: failure()
        run: |
          json='{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: Publish ${{ matrix.name }} failed: <https://github.com/cds-snc/gcds-components/actions/workflows/compile-and-publish.yml|Publish packages>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.SLACK_WEBHOOK_OPS }}
